set(DI_GENERATOR_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(DI_GENERATOR_VENV ${CMAKE_CURRENT_BINARY_DIR}/venv)
set(DI_GENERATOR_PYTHON ${DI_GENERATOR_VENV}/bin/python3)

set_property(GLOBAL PROPERTY DI_GENERATOR_DIR ${DI_GENERATOR_DIR})
set_property(GLOBAL PROPERTY DI_GENERATOR_VENV ${DI_GENERATOR_VENV})
set_property(GLOBAL PROPERTY DI_GENERATOR_PYTHON ${DI_GENERATOR_PYTHON})

macro(di_import_properties)
    get_property(DI_GENERATOR_DIR GLOBAL PROPERTY DI_GENERATOR_DIR)
    get_property(DI_GENERATOR_VENV GLOBAL PROPERTY DI_GENERATOR_VENV)
    get_property(DI_GENERATOR_PYTHON GLOBAL PROPERTY DI_GENERATOR_PYTHON)
    set(DI_GENERATOR_CLONE_DIR ${CMAKE_CURRENT_BINARY_DIR}/di_generator/clones)
    set(DI_GENERATOR_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/di_generator/src)
    set(DI_GENERATOR_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/di_generator/include)
    set(DI_GENERATOR_MODULES_DIR ${CMAKE_CURRENT_BINARY_DIR}/di_generator/modules)
endmacro()

find_package(Python3 REQUIRED)

add_custom_command(
    OUTPUT "${DI_GENERATOR_PYTHON}"
    COMMAND ${Python3_EXECUTABLE} -m venv ${DI_GENERATOR_VENV}
    COMMENT "di_generator: Initialising python venv"
)
add_custom_command(
    OUTPUT "${DI_GENERATOR_VENV}.stamp"
    DEPENDS "${DI_GENERATOR_PYTHON}" "${DI_GENERATOR_DIR}/requirements.txt"
    COMMAND ${DI_GENERATOR_PYTHON} -m pip install -r "${DI_GENERATOR_DIR}/requirements.txt" --upgrade
    COMMAND touch ${DI_GENERATOR_VENV}.stamp
    COMMENT "di_generator: Installing dependencies"
)
add_custom_target(di_generator_python DEPENDS "${DI_GENERATOR_VENV}.stamp")

function(target_generate_di_src TARGET_NAME)
    di_import_properties()

    set(options UNITY PRECOMPILE_HEADERS)
    set(oneValueArgs GRAPH_HEADER GRAPH_TYPE ID)
    set(multiValueArgs COMMON_HEADERS NODES)
    cmake_parse_arguments(arg "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    # Prepare common includes
    list(APPEND arg_COMMON_HEADERS "di/graph.hpp" "di/macros.hpp")
    list(SORT arg_COMMON_HEADERS)
    list(REMOVE_DUPLICATES arg_COMMON_HEADERS)
    foreach(COMMON_HEADER ${arg_COMMON_HEADERS})
        string(APPEND COMMON_INCLUDES "#include \"${COMMON_HEADER}\"\n")
    endforeach()

    function(write_src_file OUT_SRC_FILES)
        list(SORT NODE_HEADERS)
        list(REMOVE_DUPLICATES NODE_HEADERS)
        foreach(NODE_HEADER ${NODE_HEADERS})
            string(APPEND NODE_INCLUDES "#include \"${NODE_HEADER}\"\n")
        endforeach()

        list(SORT NODE_DOT_PATHS)
        list(REMOVE_DUPLICATES NODE_DOT_PATHS)
        foreach(NODE_DOT_PATH ${NODE_DOT_PATHS})
            string(APPEND NODE_INSTANTIATIONS "DI_INSTANTIATE(${arg_GRAPH_TYPE}, ${NODE_DOT_PATH})\n")
        endforeach()

        set(SRC_FILE_CONTENTS [=[
// DO NOT MODIFY: This file was generated by CMake during the build

#include "${arg_GRAPH_HEADER}"
${COMMON_INCLUDES}
${NODE_INCLUDES}
${NODE_INSTANTIATIONS}
]=])

        if(${arg_UNITY})
            set(SRC_NAME "unity/src")
        else()
            list(JOIN NODE_DOT_PATHS "_" SRC_NAME)
        endif()
        set(SRC_FILE "${DI_GENERATOR_SOURCE_DIR}/${arg_GRAPH_HEADER}/${arg_ID}/${SRC_NAME}.cpp")
        set(${OUT_SRC_FILES} "${${OUT_SRC_FILES}}" "${SRC_FILE}" PARENT_SCOPE)
        file(CONFIGURE OUTPUT "${SRC_FILE}" CONTENT ${SRC_FILE_CONTENTS})
    endfunction(write_src_file)

    string(REGEX REPLACE "[; ]*,[; ]*" "\\\;" NODES "${arg_NODES}")
    while(NODES)
        list(POP_FRONT NODES tmp_NODE_DOT_PATHS tmp_NODE_HEADERS)
        list(APPEND NODE_DOT_PATHS ${tmp_NODE_DOT_PATHS})
        list(APPEND NODE_HEADERS ${tmp_NODE_HEADERS})

        if(NOT ${arg_UNITY})
            write_src_file(SRC_FILES)
            set(NODE_HEADERS)
            set(NODE_DOT_PATHS)
        endif()
    endwhile()

    if(${arg_UNITY})
        write_src_file(SRC_FILES)
    endif()

    list(SORT SRC_FILES)
    list(REMOVE_DUPLICATES SRC_FILES)
    target_sources(${TARGET_NAME} PRIVATE ${SRC_FILES})

    if(${arg_PRECOMPILE_HEADERS})
        set(PCHS \"di/di.hpp\" \"${arg_GRAPH_HEADER}\")
        foreach(PCH ${arg_COMMON_HEADERS})
            list(APPEND PCHS \"${PCH}\")
        endforeach()
        list(SORT PCHS)
        list(REMOVE_DUPLICATES PCHS)
        target_precompile_headers(${TARGET_NAME} PRIVATE ${PCHS})
    endif()

endfunction(target_generate_di_src)

function(target_generate_di_headers TARGET_NAME)
    di_import_properties()

    set(options)
    set(oneValueArgs INCLUDE_DIR)
    set(multiValueArgs GLOB FILES)
    cmake_parse_arguments(arg "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    set(INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/${arg_INCLUDE_DIR}")

    if(arg_GLOB)
        foreach(SUB_DIR ${arg_GLOB})
            list(APPEND GLOB_EXPRESSIONS "${INCLUDE_DIR}/${SUB_DIR}/*.hxx.dig")
        endforeach()
        file(GLOB_RECURSE INPUT_FILES RELATIVE ${INCLUDE_DIR} CONFIGURE_DEPENDS ${GLOB_EXPRESSIONS})
    elseif(NOT DEFINED arg_FILES OR "GLOB" IN_LIST arg_KEYWORDS_MISSING_VALUES)
        file(GLOB_RECURSE INPUT_FILES RELATIVE ${INCLUDE_DIR} CONFIGURE_DEPENDS "${INCLUDE_DIR}/*.hxx.dig")
    endif()

    list(APPEND INPUT_FILES ${arg_FILES})
    list(SORT INPUT_FILES)
    list(REMOVE_DUPLICATES INPUT_FILES)

    foreach(INPUT_FILE ${INPUT_FILES})
        get_filename_component(INPUT_FILE_NAME "${INPUT_FILE}" NAME)
        get_filename_component(INPUT_FILE_WLE "${INPUT_FILE}" NAME_WLE)
        get_filename_component(INPUT_CLONE_PATH "${DI_GENERATOR_CLONE_DIR}/${INPUT_FILE}" DIRECTORY)
        get_filename_component(OUTPUT_INCLUDE_PATH "${DI_GENERATOR_INCLUDE_DIR}/${INPUT_FILE}" DIRECTORY)
        set(INPUT_CLONE "${INPUT_CLONE_PATH}/${INPUT_FILE_NAME}")
        set(OUTPUT_FILE "${OUTPUT_INCLUDE_PATH}/${INPUT_FILE_WLE}")

        list(APPEND INPUT_CLONES "${INPUT_CLONE}")

        add_custom_command(
            OUTPUT ${INPUT_CLONE}
            BYPRODUCTS ${OUTPUT_FILE}
            DEPENDS
                di_generator_python
                "${INCLUDE_DIR}/${INPUT_FILE}"
                "${DI_GENERATOR_DIR}/generate.py"
                "${DI_GENERATOR_DIR}/dig_header.lark"
                "${DI_GENERATOR_DIR}/dig.lark"
                "${DI_GENERATOR_DIR}/template.hxx.jinja"
                "${DI_GENERATOR_DIR}/template.jinja"
            COMMAND ${CMAKE_COMMAND} -E copy "${INCLUDE_DIR}/${INPUT_FILE}" "${INPUT_CLONE}"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${OUTPUT_INCLUDE_PATH}"
            COMMAND ${DI_GENERATOR_PYTHON} ${DI_GENERATOR_DIR}/generate.py "${INPUT_FILE}" "${OUTPUT_FILE}"
            WORKING_DIRECTORY "${INCLUDE_DIR}"
            COMMENT "${TARGET_NAME}_hxx_dig: ${INPUT_FILE}"
        )
    endforeach()

    add_custom_target(
        "${TARGET_NAME}_hxx_dig"
        DEPENDS ${INPUT_CLONES}
    )

    add_dependencies(${TARGET_NAME} "${TARGET_NAME}_hxx_dig")
    target_include_directories(${TARGET_NAME} PUBLIC ${DI_GENERATOR_INCLUDE_DIR})

endfunction(target_generate_di_headers)


function(target_generate_di_modules TARGET_NAME)
    di_import_properties()

    set(options)
    set(oneValueArgs MODULE_DIR)
    set(multiValueArgs GLOB FILES)
    cmake_parse_arguments(arg "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    set(MODULE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/${arg_MODULE_DIR}")

    if(arg_GLOB)
        foreach(SUB_DIR ${arg_GLOB})
            list(APPEND GLOB_EXPRESSIONS "${MODULE_DIR}/${SUB_DIR}/*.ixx.dig")
        endforeach()
        file(GLOB_RECURSE INPUT_FILES RELATIVE ${MODULE_DIR} CONFIGURE_DEPENDS ${GLOB_EXPRESSIONS})
    elseif(NOT DEFINED arg_FILES OR "GLOB" IN_LIST arg_KEYWORDS_MISSING_VALUES)
        file(GLOB_RECURSE INPUT_FILES RELATIVE ${MODULE_DIR} CONFIGURE_DEPENDS "${MODULE_DIR}/*.ixx.dig")
    endif()

    list(APPEND INPUT_FILES ${arg_FILES})
    list(SORT INPUT_FILES)
    list(REMOVE_DUPLICATES INPUT_FILES)

    foreach(INPUT_FILE ${INPUT_FILES})
        get_filename_component(INPUT_FILE_NAME "${INPUT_FILE}" NAME)
        get_filename_component(INPUT_FILE_WLE "${INPUT_FILE}" NAME_WLE)
        get_filename_component(INPUT_CLONE_PATH "${DI_GENERATOR_CLONE_DIR}/${INPUT_FILE}" DIRECTORY)
        get_filename_component(OUTPUT_MODULE_PATH "${DI_GENERATOR_MODULES_DIR}/${INPUT_FILE}" DIRECTORY)
        set(INPUT_CLONE "${INPUT_CLONE_PATH}/${INPUT_FILE_NAME}")
        set(OUTPUT_FILE "${OUTPUT_MODULE_PATH}/${INPUT_FILE_WLE}")

        list(APPEND INPUT_CLONES "${INPUT_CLONE}")
        list(APPEND OUTPUT_FILES "${OUTPUT_FILE}")

        add_custom_command(
            OUTPUT ${INPUT_CLONE}
            BYPRODUCTS ${OUTPUT_FILE}
            DEPENDS
                di_generator_python
                "${MODULE_DIR}/${INPUT_FILE}"
                "${DI_GENERATOR_DIR}/generate.py"
                "${DI_GENERATOR_DIR}/dig.lark"
                "${DI_GENERATOR_DIR}/dig_module.lark"
                "${DI_GENERATOR_DIR}/template.jinja"
                "${DI_GENERATOR_DIR}/template.ixx.jinja"
            COMMAND ${CMAKE_COMMAND} -E copy "${INPUT_FILE}" "${INPUT_CLONE}"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${OUTPUT_MODULE_PATH}"
            COMMAND ${DI_GENERATOR_PYTHON} ${DI_GENERATOR_DIR}/generate.py "${INPUT_FILE}" "${OUTPUT_FILE}"
            WORKING_DIRECTORY "${MODULE_DIR}"
            COMMENT "${TARGET_NAME}_ixx_dig: ${INPUT_FILE}"
        )
    endforeach()

    add_custom_target(
        "${TARGET_NAME}_ixx_dig"
        DEPENDS ${INPUT_CLONES}
    )

    add_dependencies(${TARGET_NAME} "${TARGET_NAME}_ixx_dig")

    target_sources(${TARGET_NAME} PUBLIC
        FILE_SET di_modules TYPE CXX_MODULES
            BASE_DIRS
                ${DI_GENERATOR_MODULES_DIR}
            FILES
                ${OUTPUT_FILES}
    )

endfunction(target_generate_di_modules)
