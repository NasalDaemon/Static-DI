export module abc.traits;

namespace abc::trait {

trait AliceRead [Types]
{
    get() const -> int

    requires { const_.apply(get_c) } -> std::same_as<int>
    requires typename Types::AliceType
}

trait AliceWrite [Types, Root: R]
{
    set(int value)

    //requires typename R::AliceType;
    //requires { const_.asdasd() }
    requires typename Types::AliceType
    requires impl_.apply(set_c, std::declval<int>())
    requires { impl_.apply(set_c, std::declval<int>()) } -> std::same_as<void>

    requires (int i) {
        { impl_.apply(set_c, i) } -> std::same_as<void>
    }
}

trait Alice = AliceRead + AliceWrite

trait Bob [Types]
{
    requires typename Types::BobType

    template<class... Ts>
    get(Ts const&&... i) const -> Types::BobType
    set(Types::BobType value) -> void
}

trait Charlie [Types]
{
    get() const -> Types::CharlieType
}

trait Charlie2 = Charlie
trait Charlie3 = Charlie

trait Ellie
{
    get() const -> std::same_as<int> auto
    hi(...)
}

}
