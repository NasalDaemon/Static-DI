name: Build and run tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # pull_request_target:
  #   branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.compiler.os }}
    # permissions:
    #   pull-requests: write

    container: ${{ matrix.compiler.container }}

    strategy:
      fail-fast: true
      matrix:
        build_type: [Release, Debug]
        compiler:
          - name: gcc
            version: 14
            os: ubuntu-latest
          - name: gcc
            version: 15
            os: ubuntu-latest
            container: ghcr.io/mattkretz/cplusplus-ci/gcc15
          - name: gcc
            version: 15
            std_module: std-module
            os: ubuntu-latest
            container: ghcr.io/mattkretz/cplusplus-ci/gcc15

          - name: clang
            version: 20
            os: ubuntu-latest
          - name: clang
            version: 20
            std_module: std-module
            os: ubuntu-latest

          - name: cl
            header_only: header-only
            os: windows-latest

    steps:
    - name: Git checkout
      uses: actions/checkout@v4

    - name: Set up Conan
      if: matrix.compiler.container == ''
      uses: turtlebrowser/get-conan@main

    - name: Set up Conan/CMake on custom container
      if: matrix.compiler.container != ''
      run: |
        echo /github/home/.local/bin >> $GITHUB_PATH
        echo /opt/cmake-latest/bin >> $GITHUB_PATH
        pipx install conan

    - name: Set up Mold linker on linux
      if: runner.os == 'linux'
      uses: rui314/setup-mold@v1

    - name: Set up GCC
      if: matrix.compiler.name == 'gcc' && matrix.compiler.container == ''
      env:
        GCC_VER: ${{ matrix.compiler.version }}
      run: |
        sudo apt install -y gcc-${GCC_VER} g++-${GCC_VER}
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-${GCC_VER} 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-${GCC_VER} 100
        sudo update-alternatives --set cc /usr/bin/gcc-${GCC_VER}
        sudo update-alternatives --set c++ /usr/bin/g++-${GCC_VER}

    - name: Set up Clang
      if: matrix.compiler.name == 'clang'
      env:
        CLANG_VER: ${{ matrix.compiler.version }}
      run: |
        wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- ${CLANG_VER}
        sudo apt install clang-tools-${CLANG_VER} libc++-${CLANG_VER}-dev
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-${CLANG_VER} 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-${CLANG_VER} 100
        sudo update-alternatives --set cc /usr/bin/clang-${CLANG_VER}
        sudo update-alternatives --set c++ /usr/bin/clang++-${CLANG_VER}

    - name: "Conan: Install dependencies"
      working-directory: ${{ github.workspace }}
      env:
        BUILD_TYPE: ${{ matrix.build_type }}
      run: |
        conan profile detect
        conan install . --output-folder=build --build=missing --profile=conanprofile.txt --settings=build_type=${{ matrix.build_type }}

    - name: Configure CMake ${{ matrix.compiler.std_module }}
      working-directory: ${{ github.workspace }}/build
      run: >
        cmake ..
        --preset conan-default
        -DDI_BUILD_TESTS=TRUE
        -DDI_BUILD_BENCH=TRUE
        -DDI_COMPRESS_TYPES=TRUE
        -DCMAKE_COLOR_DIAGNOSTICS=TRUE
        -DDI_BUILD_LTO=${{ matrix.build_type == 'Release' && 'TRUE' || 'FALSE' }}
        -DCMAKE_CXX_MODULE_STD=${{ matrix.compiler.std_module && 'TRUE' || 'FALSE' }}

    - name: Build
        ${{ matrix.compiler.header_only }}
        ${{ matrix.compiler.allow_build_failure }}
      id: build
      continue-on-error: ${{ !!matrix.compiler.allow_build_failure }}
      working-directory: ${{ github.workspace }}/build
      run: >
        cmake --build .
        --config ${{ matrix.build_type }}
        ${{ matrix.compiler.header_only && '-t di_tests_headers' || '' }}

    # - uses: mainmatter/continue-on-error-comment@v1
    #   if: matrix.compiler.allow_build_failure
    #   with:
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}
    #     outcome: ${{ steps.build.outcome }}
    #     test-id: Allowed failure compiling with ${{ matrix.compiler.name }}

    - name: Test
      if: steps.build.outcome == 'success'
      working-directory: ${{ github.workspace }}/build
      run: >
        ctest
        --verbose
        --build-config ${{ matrix.build_type }}
        ${{ matrix.compiler.header_only && '-R di_tests_headers' || '' }}
